{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/54b5feb5-93f4-494c-9c93-c216f4520f0f')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/54b5feb5-93f4-494c-9c93-c216f4520f0f')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2022-11-01-preview",
            "properties": {
                "displayName": "TI Map IP Entity to T-Pot:Ipphoney",
                "description": "This query maps any IP indicators of compromise (IOCs) from threat intelligence (TI), by searching for matches in tpot_CL.\n\nThis is a honeypot simulating a printer that supports the Internet Printing Protocol and is exposed to the Internet.",
                "severity": "Informational",
                "enabled": true,
                "query": "let dt_lookBack = 1h;\r\nlet ioc_lookBack = 14d;\r\nlet IoCList = materialize(externaldata(TimeGenerated: datetime, IoC: string, IoC_Type: string, ExpirationDateTime: datetime, Description: string, Action: string, ConfidenceScore: real, ThreatType: string, Active: string, Type: string, TrafficLightProtocolLevel: string, ActivityGroupNames: string)[@\"https://raw.githubusercontent.com/microsoft/mstic/master/RapidReleaseTI/Indicators.csv\"] with(format=\"csv\", ignoreFirstRecord=True));\r\nlet IP_Indicators = (union isfuzzy=true\r\n        (ThreatIntelligenceIndicator\r\n        | where TimeGenerated >= ago(ioc_lookBack) and ExpirationDateTime > now()\r\n        | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IndicatorId\r\n        | where Active == true\r\n        // Picking up only IOC's that contain the entities we want\r\n        | where isnotempty(NetworkIP)\r\n            or isnotempty(EmailSourceIpAddress)\r\n            or isnotempty(NetworkDestinationIP)\r\n            or isnotempty(NetworkSourceIP)\r\n        // As there is potentially more than 1 indicator type for matching IP, taking NetworkIP first, then others if that is empty.\r\n        // Taking the first non-empty value based on potential IOC match availability\r\n        | extend TI_ipEntity = iff(isnotempty(NetworkIP), NetworkIP, NetworkDestinationIP)\r\n        | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(NetworkSourceIP), NetworkSourceIP, TI_ipEntity)\r\n        | extend TI_ipEntity = iff(isempty(TI_ipEntity) and isnotempty(EmailSourceIpAddress), EmailSourceIpAddress, TI_ipEntity)\r\n        //Exclude local addresses, using the ipv4_is_private operator\r\n        | where ipv4_is_private(TI_ipEntity) == false\r\n            and TI_ipEntity !startswith \"fe80\"\r\n            and TI_ipEntity !startswith \"::\"\r\n            and TI_ipEntity !startswith \"127.\"\r\n        ),\r\n        (IoCList\r\n        | where IoC_Type =~ 'IP'\r\n        | where ExpirationDateTime > now()\r\n        | summarize LatestIndicatorTime = arg_max(TimeGenerated, *) by IoC\r\n        | where Active =~ 'True'\r\n        | extend TI_ipEntity = IoC\r\n        | project-away IoC_Type\r\n        )\r\n    );\r\nIP_Indicators\r\n// using innerunique to keep perf fast and result set low, we only need one match to indicate potential malicious activity that needs to be investigated\r\n| join kind=innerunique (\r\n    tpot_CL\r\n    | where TimeGenerated >= ago(dt_lookBack)\r\n    | where honeypotType == \"Ipphoney\"\r\n    // renaming time column so it is clear the log this came from\r\n    | extend tpot_TimeGenerated = TimeGenerated\r\n    )\r\n    on $left.TI_ipEntity == $right.src_ip\r\n| where tpot_TimeGenerated < ExpirationDateTime\r\n| summarize tpot_TimeGenerated = arg_max(tpot_TimeGenerated, *) by IndicatorId, src_ip, IoC\r\n| project\r\n    tpot_TimeGenerated,\r\n    Description,\r\n    ActivityGroupNames,\r\n    IndicatorId,\r\n    ThreatType,\r\n    tpothostname,\r\n    src_ip,\r\n    ip_rep, \r\n    eventid,\r\n    data, \r\n    http_user_agent, \r\n    request_method, \r\n    ipp_query\r\n| extend timestamp = tpot_TimeGenerated, HostName = tpothostname\r\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "P14D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "Discovery"
                ],
                "techniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": {
                    "Reputation": "ip_rep"
                },
                "entityMappings": [
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "src_ip"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": null
            }
        }
    ]
}